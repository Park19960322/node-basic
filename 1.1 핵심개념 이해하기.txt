노드 개념이해하기
Node.js 란 크롬 V8 자바스크립트엔진을 빌드된 자바 스크립트 런타임입니다.
Node.js는 이벤트 기반, 논블로킹 I/O 모델을 사용해 가볍고 효율적입니다. 
Node.js의 패키지 생태계인 npm은 세계에서 가장 큰 오픈소스 라이브러리 
생태계이기도 합니다.

서버
서버란 네트워크를 통해 클라이언트에 정보나 서비스를 제공하는 컴퓨터 또는 프로그램을 말합니다.
클라이언트란 요청을 보내는 주체로, 브라우저 일 수도 있고, 데스크톱 프로그램일 수도
있고, 모바일 앱일수도 있고, 다른 서버에 요청을 보내는 서버 일수 도 있습니다.
정리하자면 클라이언트는 서버에 요청, 서버는 클라이언트의 요청에 응답을 해주는 역할

자바스크립트 런타임
런타임이란 특정언어를 실행할 수 있는 환경을 의미합니다. 즉 노드는 자바스크립트의 런타임니다.
그래서 노드를 통해 자바스크립트를 컴퓨터에서 실행가능해진다.
기존 자바스크립트는 브라우저에서만 실행 가능했습니다. 브라우저 외에 환경에서 실행시킬려는
시도가 있었으나 실행속도문제 때문에 그다지 효율적이지 못했습니다.
그러나 후에 구글이 V8엔진을 사용하는 크롬을 출시하고 나서 속도문제가 개선되었고 V8엔진 기반의 노드가
탄생하게 됩니다. 이러한 노드는 V8엔진과 더불어 libuv라는 라이브러리를 사용합니다. libuv라이브러리는
노드의 특성인 이벤트 기반, 논블로킹 I/O모델을 구현하고 있습니다.

이벤트 기반
이벤트 기반이란 이벤트가 발생할 때 미리 지정해둔 작업을 수행하는 방식을 의미압니다
이벤트기반 시스템에서는 특정이벤트 발생시 어떤 작업을 진행할지 미리 설정해둬야 합니다. 이를
EventListener function에 CallBack function을 등록한다고 표현합니다.

이벤트루프: 이벤트 발생 시 콜백 함수들을 관리하고, 호출된 콜백 함수의 실행 순서를 결정하는 역할을 담당합니다.
	   노드가 종료될 때까지 이벤트 처리를 위한 작업을 반복하므로 루프라고 불립니다.
태스크 큐: 이벤트 발생 후 호출되어야 할 콜백 함수들이 기다리는 공간입니다. 콜백들이 이벤트 루프가 정한 순서대로 줄을 서 있으므로 콜백 큐라고도 부릅니다.
백그라운드: 타이머나 I/O작업 콜백 또는 이벤트 리스너들이 대기하는 곳입니다.

논블로킹 I/O
논블로킹이란 이전 작업이 완료될 때까지 멈추지 않고 다음 작업을 수행함을 뜻합니다. 블로킹방식 보다 같은 작업을 좀더 짧은 시간안에 처리할 수 있지만
싱글 스레드라는 한계 때문에 자바스크립트의 모든 코드가 이방식으로 시간적 이득을 볼수는 없습니다. 그래서 노드 프로세서 외에 다른 컴퓨팅 자원을 사용할 수 있는
I/O작업이 주로 시간적 이득을 많이 봅니다. I/O는 입력/출력을 의미합니다. 이러한 작업을 할 때 노드는 논블로킹 방식으로 동작합니다.

싱글 스레드
스레드에 대해 간략히 설명하자면 컴퓨터가 작업을 처리할 수 있는 일손이라 생각하면 된다. 노드는 싱글스레드이므로 한번에 한가지 작업밖에 처리 못한다.
노드는 싱글스레드의 비효율적인 부분을 보완하고자 싱글스레드/논블로킹 모델을 채용하고 있습니다. 스레드 하나로 여러가지 일을 처리할 수있기에 효율적이지만
한번에 너무 많은 작업이 들어오거나 스레드가 하나가 제역할을 못하게 되면 문제가 생길수 있습니다.


